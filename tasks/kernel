#!/bin/bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2020 Saurabh Charde <saurabhchardereal@gmail.com>
#

# Source common helper
SCRIPT_PATH=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
source ${SCRIPT_PATH}/../common

# Exit if not a kernel repository
[[ ! -f Makefile ]] && prErr "Run from within kernel directory!" && exit 1

# Set compiler paths
COMPILER_PATH=${HOME}/compiler
AOSP_TC=${COMPILER_PATH}/aosp_tc
PROTON_CLANG=${COMPILER_PATH}/proton_clang

# Kernel specific
DEFCONFIG="X00T_defconfig"
ANYKERNEL=flasher

export KBUILD_BUILD_USER="SaurabhCharde"
export KBUILD_BUILD_HOST="ProjectWeeb"

# Common arguments
MAKE_ARGS="-j$(nproc --all) O=out ARCH=arm64 "

# Check for dependencies
checkDeps() {
    if [[ -n "$USE_AOSP_CLANG" ]]; then
        [[ ! -d "$AOSP_TC/clang" ]] &&
            git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 -b master $AOSP_TC/clang

        [[ ! -d "$AOSP_TC/gcc" ]] &&
            git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b ${ANDROID_TAG} $AOSP_TC/gcc

        [[ ! -d "$AOSP_TC/gcc32" ]] &&
            git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b ${ANDROID_TAG} $AOSP_TC/gcc32
    fi
    [[ ! -d "$ANYKERNEL" ]] &&
        git clone --depth=1 https://github.com/saurabhchardereal/AnyKernel3 -b ARAGOTO $ANYKERNEL

    [[ ! -d "$PROTON_CLANG" ]] &&
        git clone --depth=1 https://github.com/kdrag0n/proton-clang -b master $PROTON_CLANG
}

# Set make arguments based on which Clang we use
makeArgs() {
    if [[ -n "$USE_AOSP_CLANG" ]]; then
        # specify clang version
        CLANG_VER="r399163"
        MAKE_ARGS+="CC=$AOSP_TC/clang/clang-${CLANG_VER}/bin/clang \
        CLANG_TRIPLE=aarch64-linux-gnu- \
        CROSS_COMPILE=$AOSP_TC/gcc/bin/aarch64-linux-android- \
        CROSS_COMPILE_ARM32=$AOSP_TC/gcc32/bin/arm-linux-androideabi- "
    else
        MAKE_ARGS+="CC=$PROTON_CLANG/bin/clang \
        CROSS_COMPILE=aarch64-linux-gnu- \
        CROSS_COMPILE_ARM32=arm-linux-gnueabi- "
    fi
}

makeClean() {
    header "Making Clean..."
    make ${MAKE_ARGS} clean
    make mrproper
    prInfo "Cleaned!"
}

makeDefconfig() {
    header "Regenerating defconfig..."
    make ${MAKE_ARGS} $DEFCONFIG
    cp -f out/.config arch/arm64/configs/X00T_defconfig
    prInfo "Renerating defconfig done!"
}

makeKernel() {
    header "Building kernel..."
    checkDeps
    makeArgs
    if [[ -f out/.config ]]; then
        make ${MAKE_ARGS} oldconfig
    else
        make ${MAKE_ARGS} $DEFCONFIG
    fi
    make ${MAKE_ARGS}

    # Make flashable zip if not BUILD_ONLY
    if [[ -z ${BUILD_ONLY} ]]; then
        ZIMAGE=$(find out/arch/arm64 -name Image.gz-dtb)
        if [[ -n ${ZIMAGE} ]]; then
            header "Making Flashable Zip..."
            ZIP_NAME="ARAGOTO-$(date +"%d%m%Y")-$(date +%H:%M).zip"
            cp -f ${ZIMAGE} $ANYKERNEL
            cd $ANYKERNEL
            find . -name "*.zip" -type f -delete
            zip -r $ZIP_NAME *
        else
            prErr "No kernel image found!"
        fi
    else
        prInfo "Kernel image build completed!"
    fi
}

# Add build parameters
parse_build_params() {
    START=$(date +"%s")
    while ((${#})); do
        case "${1}" in
        --aosp-clang)
            USE_AOSP_CLANG=true
            ;;

        -r | --regendef)
            makeDefconfig
            ;;

        -c | --clean)
            makeClean
            ;;

        -m | --make)
            makeKernel
            ;;

        -bo | --build-only)
            BUILD_ONLY=true
            ;;
        esac
        shift
    done
}

parse_build_params "${@}"
DURATION=$(($(date +"%s") - START))
prSucc "Build completed in $((DURATION / 60)) mins and $((DURATION % 60)) secs"
