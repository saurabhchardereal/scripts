#!/bin/bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2020 Saurabh Charde <saurabhchardereal@gmail.com>
#

# Source common helper
SCRIPT_PATH=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
source "${SCRIPT_PATH}"/../common

# Exit if not a kernel repository
[[ ! -f Makefile ]] && pr_err "Run from within kernel directory!" && exit 1
KERN_DIR=${PWD}

# Set compiler paths
COMPILER_PATH=${HOME}/compiler
AOSP_TC=${COMPILER_PATH}/aosp_tc
PROTON_CLANG=${COMPILER_PATH}/proton_clang

# Kernel specific
DEFCONFIG="X00T_defconfig"

export KBUILD_BUILD_USER="SaurabhCharde"
export KBUILD_BUILD_HOST="ProjectWeeb"

# Add toolchains to $PATH
PATH=${AOSP_TC}/gcc/bin:${AOSP_TC}/gcc32/bin:$PATH

# Common arguments
# shellcheck disable=SC2191
MAKE_ARGS=(-j"$(nproc --all)" O=out ARCH=arm64)

# Check for dependencies
check_toolchains() {
    [[ ! -d "$AOSP_TC/clang" ]] &&
        git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 -b master "${AOSP_TC}"/clang

    [[ ! -d "$AOSP_TC/gcc" ]] &&
        git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b master "${AOSP_TC}"/gcc

    [[ ! -d "$AOSP_TC/gcc32" ]] &&
        git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b master "${AOSP_TC}"/gcc32

    [[ ! -d "$KERN_DIR/flasher" ]] &&
        git clone --depth=1 https://github.com/saurabhchardereal/AnyKernel3 -b ARAGOTO "${KERN_DIR}"/flasher

    [[ ! -d "$PROTON_CLANG" ]] &&
        git clone --depth=1 https://github.com/kdrag0n/proton-clang -b master "${PROTON_CLANG}"
}

# Set make arguments based on which Clang we use
make_arguments() {
    if [[ -n "$USE_AOSP_CLANG" ]]; then
        # specify clang version
        # shellcheck disable=SC2191
        MAKE_ARGS+=(CC="$AOSP_TC"/clang/clang-stable/bin/clang
            CLANG_TRIPLE=aarch64-linux-gnu-
            CROSS_COMPILE=aarch64-linux-android-
            CROSS_COMPILE_ARM32=arm-linux-androideabi-)
    else
        PATH=${PROTON_CLANG}/bin:$PATH
        # shellcheck disable=SC2191
        MAKE_ARGS+=(CC="${PROTON_CLANG}"/bin/clang
            CROSS_COMPILE=aarch64-linux-gnu-
            CROSS_COMPILE_ARM32=arm-linux-gnueabi-)
    fi
}

make_clean() {
    header "Making Clean..."
    make "${MAKE_ARGS[@]}" clean
    make mrproper
    pr_info "Cleaned!"
}

make_defconfig() {
    header "Regenerating defconfig..."
    make "${MAKE_ARGS[@]}" $DEFCONFIG
    cp -f out/.config arch/arm64/configs/$DEFCONFIG
    pr_info "Renerating defconfig done!"
}

make_kernel() {
    header "Building kernel..."
    check_toolchains
    make_arguments
    if [[ -f out/.config ]]; then
        make "${MAKE_ARGS[@]}" oldconfig
    else
        make "${MAKE_ARGS[@]}" $DEFCONFIG
    fi
    make "${MAKE_ARGS[@]}"

    # Make flashable zip if not BUILD_ONLY
    if [[ -z ${BUILD_ONLY} ]]; then
        ZIMAGE=$(find out/arch/arm64 -name Image.gz-dtb)
        { if [[ -n ${ZIMAGE} ]]; then
            header "Making Flashable Zip..."
            ZIP_NAME="ARAGOTO-$(date +"%d%m%Y")-$(date +%H:%M).zip"
            cp -f "${ZIMAGE}" "${KERN_DIR}"/flasher
            find "${KERN_DIR}"/flasher -name "*.zip" -type f -delete
            zip -r "$ZIP_NAME" -- "${KERN_DIR}"/flasher/*
        else
            pr_err "No kernel image found!"
        fi; }
    else
        pr_info "Kernel image build completed!"
    fi
}

# Add build parameters
parse_build_params() {
    START=$(date +"%s")
    while ((${#})); do
        case "${1}" in
            --aosp-clang)
                USE_AOSP_CLANG=true
                ;;

            -b | --build-only)
                BUILD_ONLY=true
                ;;

            -r | --regendef)
                make_defconfig
                ;;

            -c | --clean)
                make_clean
                ;;

            -m | --make)
                make_kernel
                ;;
        esac
        shift
    done
}

parse_build_params "${@}"
DURATION=$(($(date +"%s") - START))
pr_succ "Build completed in $((DURATION / 60)) mins and $((DURATION % 60)) secs"
